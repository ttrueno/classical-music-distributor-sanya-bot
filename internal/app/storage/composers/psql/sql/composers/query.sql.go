// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package composers

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteComposer = `-- name: DeleteComposer :exec
DELETE FROM composers
WHERE id = $1
`

func (q *Queries) DeleteComposer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComposer, id)
	return err
}

const insertComposer = `-- name: InsertComposer :one
INSERT INTO composers (
   first_name, last_name, image_link, description
) VALUES (
   $1, $2, $3, $4
)
RETURNING id, first_name, last_name, image_link, description, version
`

type InsertComposerParams struct {
	FirstName   string
	LastName    string
	ImageLink   pgtype.Text
	Description pgtype.Text
}

func (q *Queries) InsertComposer(ctx context.Context, arg InsertComposerParams) (Composer, error) {
	row := q.db.QueryRow(ctx, insertComposer,
		arg.FirstName,
		arg.LastName,
		arg.ImageLink,
		arg.Description,
	)
	var i Composer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ImageLink,
		&i.Description,
		&i.Version,
	)
	return i, err
}

const selectComposer = `-- name: SelectComposer :one
SELECT id, first_name, last_name, image_link, description, version FROM composers
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectComposer(ctx context.Context, id int64) (Composer, error) {
	row := q.db.QueryRow(ctx, selectComposer, id)
	var i Composer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ImageLink,
		&i.Description,
		&i.Version,
	)
	return i, err
}

const selectComposers = `-- name: SelectComposers :many
SELECT id, first_name, last_name, image_link, description, version FROM composers
ORDER BY composers.id ASC
OFFSET $1 LIMIT $2
`

type SelectComposersParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) SelectComposers(ctx context.Context, arg SelectComposersParams) ([]Composer, error) {
	rows, err := q.db.Query(ctx, selectComposers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Composer
	for rows.Next() {
		var i Composer
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.ImageLink,
			&i.Description,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComposer = `-- name: UpdateComposer :one
UPDATE composers
SET first_name = $1, last_name = $2, image_link = $3, description = $4, version = version + 1
WHERE id = $5
RETURNING id, first_name, last_name, image_link, description, version
`

type UpdateComposerParams struct {
	FirstName   string
	LastName    string
	ImageLink   pgtype.Text
	Description pgtype.Text
	ID          int64
}

func (q *Queries) UpdateComposer(ctx context.Context, arg UpdateComposerParams) (Composer, error) {
	row := q.db.QueryRow(ctx, updateComposer,
		arg.FirstName,
		arg.LastName,
		arg.ImageLink,
		arg.Description,
		arg.ID,
	)
	var i Composer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ImageLink,
		&i.Description,
		&i.Version,
	)
	return i, err
}
