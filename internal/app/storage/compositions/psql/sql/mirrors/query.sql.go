// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package mirrors

import (
	"context"
)

const deleteCompositionMirror = `-- name: DeleteCompositionMirror :exec
DELETE FROM composition_mirrors
WHERE id = $1
`

func (q *Queries) DeleteCompositionMirror(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCompositionMirror, id)
	return err
}

const getCompositionMirror = `-- name: GetCompositionMirror :one
SELECT id, composition_id, link, version FROM composition_mirrors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompositionMirror(ctx context.Context, id int64) (CompositionMirror, error) {
	row := q.db.QueryRow(ctx, getCompositionMirror, id)
	var i CompositionMirror
	err := row.Scan(
		&i.ID,
		&i.CompositionID,
		&i.Link,
		&i.Version,
	)
	return i, err
}

const getCompositionsMirrorsByCompositionID = `-- name: GetCompositionsMirrorsByCompositionID :many
SELECT id, composition_id, link, version FROM composition_mirrors
WHERE composition_id = $1
`

func (q *Queries) GetCompositionsMirrorsByCompositionID(ctx context.Context, compositionID int64) ([]CompositionMirror, error) {
	rows, err := q.db.Query(ctx, getCompositionsMirrorsByCompositionID, compositionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompositionMirror
	for rows.Next() {
		var i CompositionMirror
		if err := rows.Scan(
			&i.ID,
			&i.CompositionID,
			&i.Link,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCompositionMirror = `-- name: InsertCompositionMirror :one
INSERT INTO composition_mirrors (
   composition_id, link
) VALUES (
   $1, $2
)
RETURNING id, composition_id, link, version
`

type InsertCompositionMirrorParams struct {
	CompositionID int64
	Link          string
}

func (q *Queries) InsertCompositionMirror(ctx context.Context, arg InsertCompositionMirrorParams) (CompositionMirror, error) {
	row := q.db.QueryRow(ctx, insertCompositionMirror, arg.CompositionID, arg.Link)
	var i CompositionMirror
	err := row.Scan(
		&i.ID,
		&i.CompositionID,
		&i.Link,
		&i.Version,
	)
	return i, err
}

const updateCompositionMirror = `-- name: UpdateCompositionMirror :one
UPDATE composition_mirrors
SET composition_id = $1, link = $2, version = version + 1
WHERE id = $3
RETURNING id, composition_id, link, version
`

type UpdateCompositionMirrorParams struct {
	CompositionID int64
	Link          string
	ID            int64
}

func (q *Queries) UpdateCompositionMirror(ctx context.Context, arg UpdateCompositionMirrorParams) (CompositionMirror, error) {
	row := q.db.QueryRow(ctx, updateCompositionMirror, arg.CompositionID, arg.Link, arg.ID)
	var i CompositionMirror
	err := row.Scan(
		&i.ID,
		&i.CompositionID,
		&i.Link,
		&i.Version,
	)
	return i, err
}
